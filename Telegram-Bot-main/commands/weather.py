import requests
from datetime import datetime
import random

TOMORROW_API_KEY = "mdTWQAInBIDB3mHiDtkwuTlwhVB50rqn"
OPENWEATHER_API_KEY = "e707d13f116e5f7ac80bd21c37883e5e"
WEATHERAPI_KEY = "fe221e3a25734f0297994922240611"

def get_uv_level(index):
    if index <= 2: return "Th·∫•p"
    if index <= 5: return "Trung b√¨nh"
    if index <= 7: return "Cao"
    if index <= 10: return "R·∫•t cao"
    return "Nguy hi·ªÉm"

def get_wind_direction(degrees):
    directions = ["B·∫Øc", "ƒê√¥ng B·∫Øc", "ƒê√¥ng", "ƒê√¥ng Nam", "Nam", "T√¢y Nam", "T√¢y", "T√¢y B·∫Øc"]
    index = round(degrees / 45) % 8
    return directions[index]

def get_precipitation_forecast(hourly_data):
    if not isinstance(hourly_data, list): return "Kh√¥ng c√≥ d·ªØ li·ªáu d·ª± b√°o m∆∞a"
    next_24_hours = hourly_data[:24]
    rain_hour = next((hour for hour in next_24_hours if hour.get("values", {}).get("precipitationProbability", 0) > 50), None)
    if not rain_hour:
        light_rain_hour = next((hour for hour in next_24_hours if hour.get("values", {}).get("precipitationProbability", 0) > 30), None)
        if light_rain_hour: return "C√≥ th·ªÉ c√≥ m∆∞a nh·ªè trong 24 gi·ªù t·ªõi"
        return "D·ª± ki·∫øn kh√¥ng c√≥ m∆∞a trong 24 gi·ªù t·ªõi"
    try:
        time = datetime.fromisoformat(rain_hour["time"].replace("Z", "+00:00"))
        hour = time.hour
        day_names = ["Ch·ªß Nh·∫≠t", "Th·ª© Hai", "Th·ª© Ba", "Th·ª© T∆∞", "Th·ª© NƒÉm", "Th·ª© S√°u", "Th·ª© B·∫£y"]
        day_name = day_names[time.weekday()]
        time_of_day = "s√°ng" if 5 <= hour < 12 else "chi·ªÅu" if 12 <= hour < 18 else "t·ªëi" if 18 <= hour < 22 else "ƒë√™m"
        probability = rain_hour["values"]["precipitationProbability"]
        intensity = get_rain_intensity(rain_hour["values"].get("rainIntensity", 0))
        return f"D·ª± b√°o {intensity} v√†o {time_of_day} {day_name} ({probability}% kh·∫£ nƒÉng)"
    except:
        return "Kh√¥ng th·ªÉ d·ª± ƒëo√°n ch√≠nh x√°c th·ªùi gian m∆∞a"

def get_rain_intensity(intensity):
    if intensity == 0: return "kh√¥ng m∆∞a"
    if intensity < 2.5: return "m∆∞a nh·ªè"
    if intensity < 7.6: return "m∆∞a v·ª´a"
    if intensity < 15.2: return "m∆∞a to"
    if intensity < 30.4: return "m∆∞a r·∫•t to"
    return "m∆∞a ƒë·∫∑c bi·ªát to"

def get_weather_description(code):
    weather_codes = {
        1000: "Quang ƒë√£ng",
        1100: "C√≥ m√¢y nh·∫π",
        1101: "C√≥ m√¢y",
        1102: "Nhi·ªÅu m√¢y",
        1001: "√Çm u",
        2000: "S∆∞∆°ng m√π",
        2100: "S∆∞∆°ng m√π nh·∫π",
        4000: "M∆∞a nh·ªè",
        4001: "M∆∞a",
        4200: "M∆∞a nh·∫π",
        4201: "M∆∞a v·ª´a",
        4202: "M∆∞a to",
        5000: "Tuy·∫øt",
        5001: "Tuy·∫øt r∆°i nh·∫π",
        5100: "M∆∞a tuy·∫øt nh·∫π",
        6000: "M∆∞a ƒë√°",
        6200: "M∆∞a ƒë√° nh·∫π",
        6201: "M∆∞a ƒë√° n·∫∑ng",
        7000: "S·∫•m s√©t",
        7101: "S·∫•m s√©t m·∫°nh",
        7102: "Gi√¥ng b√£o",
        8000: "M·ªôt v√†i c∆°n m∆∞a r√†o"
    }
    return weather_codes.get(code, "Kh√¥ng r√µ")

def weather(message, bot):
    args = message.text.split(' ', 1)
    location = args[1].strip() if len(args) > 1 else ""
    if not location:
        major_cities = ["H√† N·ªôi", "H·ªì Ch√≠ Minh", "ƒê√† N·∫µng", "C·∫ßn Th∆°", "Hu·∫ø"]
        location = random.choice(major_cities)
        is_overall = True
    else:
        is_overall = False
    try:
        geo_response = requests.get(f"https://geocoding-api.open-meteo.com/v1/search?name={location}&count=1&language=vi&format=json")
        geo_data = geo_response.json()
        if not geo_data.get("results"):
            bot.reply_to(message, "<blockquote>Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm n√†y.</blockquote>", parse_mode='HTML')
            return
        geo = geo_data["results"][0]
        lat, lon = geo["latitude"], geo["longitude"]
        name, admin1, country = geo["name"], geo.get("admin1", ""), geo.get("country", "")
        tomorrow_response = requests.get(f"https://api.tomorrow.io/v4/weather/forecast?location={lat},{lon}&apikey={TOMORROW_API_KEY}")
        openweather_response = requests.get(f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}&units=metric&lang=vi")
        weatherapi_response = requests.get(f"http://api.weatherapi.com/v1/forecast.json?key={WEATHERAPI_KEY}&q={lat},{lon}&days=3&aqi=yes&lang=vi")
        tomorrow_data = tomorrow_response.json()
        openweather_data = openweather_response.json()
        weatherapi_data = weatherapi_response.json()
        daily = tomorrow_data["timelines"]["daily"][0]["values"]
        current = openweather_data
        forecast = weatherapi_data["forecast"]["forecastday"]
        uv_index = weatherapi_data["current"]["uv"]
        uv_level = get_uv_level(uv_index)
        current_weather = current["weather"][0]
        current_temp = current["main"]
        current_wind = current["wind"]
        current_rain = current.get("rain", {}).get("1h", 0)
        tomorrow_weather_code = daily.get("weatherCodeMax") or daily.get("weatherCodeMin")
        weather_desc = get_weather_description(tomorrow_weather_code)
        weather_info = f"[ TH√îNG B√ÅO TH·ªúI TI·∫æT ]\n" + \
                       f"üìç {name}{', ' + admin1 if admin1 else ''}{', ' + country if country else ''}{' (T·ªïng Quan)' if is_overall else ''}\n" + \
                       f"‚è∞ C·∫≠p nh·∫≠t: {datetime.fromtimestamp(current['dt']).strftime('%H:%M %d/%m/%Y')}\n\n" + \
                       f"üå°Ô∏è NHI·ªÜT ƒê·ªò V√Ä ƒê·ªò ·∫®M\n" + \
                       f"‚Ä¢ Hi·ªán t·∫°i: {current_temp['temp']}¬∞C (C·∫£m gi√°c: {current_temp['feels_like']}¬∞C)\n" + \
                       f"‚Ä¢ Th·∫•p nh·∫•t: {current_temp['temp_min']}¬∞C\n" + \
                       f"‚Ä¢ Cao nh·∫•t: {current_temp['temp_max']}¬∞C\n" + \
                       f"‚Ä¢ ƒê·ªô ·∫©m: {current_temp['humidity']}%\n\n" + \
                       f"üå§Ô∏è ƒêI·ªÄU KI·ªÜN TH·ªúI TI·∫æT\n" + \
                       f"‚Ä¢ Hi·ªán t·∫°i: {current_weather['description'].capitalize()}\n" + \
                       f"‚Ä¢ D·ª± b√°o: {weather_desc}\n" + \
                       f"‚Ä¢ M√¢y che ph·ªß: {current['clouds']['all']}%\n" + \
                       f"‚Ä¢ T·∫ßm nh√¨n: {(current['visibility'] / 1000):.1f}km\n\n" + \
                       f"üåßÔ∏è L∆Ø·ª¢NG M∆ØA V√Ä KH·∫¢ NƒÇNG M∆ØA\n" + \
                       f"‚Ä¢ L∆∞·ª£ng m∆∞a (1h qua): {current_rain}mm\n" + \
                       f"‚Ä¢ {get_precipitation_forecast(tomorrow_data['timelines']['hourly'])}\n\n" + \
                       f"üí® GI√ì\n" + \
                       f"‚Ä¢ T·ªëc ƒë·ªô: {current_wind['speed']} m/s\n" + \
                       f"‚Ä¢ H∆∞·ªõng: {get_wind_direction(current_wind['deg'])}\n" + \
                       f"‚Ä¢ Gi√≥ gi·∫≠t: {current_wind.get('gust', 0)} m/s\n\n" + \
                       f"‚òÄÔ∏è CH·ªà S·ªê UV\n" + \
                       f"‚Ä¢ UV: {uv_index} ({uv_level})"
        bot.reply_to(message, weather_info, parse_mode='HTML')
    except Exception as e:
        bot.reply_to(message, f"<blockquote>ƒê√£ x·∫£y ra l·ªói: {str(e)}</blockquote>", parse_mode='HTML')
